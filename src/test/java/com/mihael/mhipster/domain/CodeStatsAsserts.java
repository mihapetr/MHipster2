package com.mihael.mhipster.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CodeStatsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCodeStatsAllPropertiesEquals(CodeStats expected, CodeStats actual) {
        assertCodeStatsAutoGeneratedPropertiesEquals(expected, actual);
        assertCodeStatsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCodeStatsAllUpdatablePropertiesEquals(CodeStats expected, CodeStats actual) {
        assertCodeStatsUpdatableFieldsEquals(expected, actual);
        assertCodeStatsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCodeStatsAutoGeneratedPropertiesEquals(CodeStats expected, CodeStats actual) {
        assertThat(expected)
            .as("Verify CodeStats auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCodeStatsUpdatableFieldsEquals(CodeStats expected, CodeStats actual) {
        assertThat(expected)
            .as("Verify CodeStats relevant properties")
            .satisfies(e -> assertThat(e.getInstructions()).as("check instructions").isEqualTo(actual.getInstructions()))
            .satisfies(e -> assertThat(e.getBranches()).as("check branches").isEqualTo(actual.getBranches()))
            .satisfies(e -> assertThat(e.getLines()).as("check lines").isEqualTo(actual.getLines()))
            .satisfies(e -> assertThat(e.getMethods()).as("check methods").isEqualTo(actual.getMethods()))
            .satisfies(e -> assertThat(e.getClasses()).as("check classes").isEqualTo(actual.getClasses()))
            .satisfies(e -> assertThat(e.getDeadInstructions()).as("check deadInstructions").isEqualTo(actual.getDeadInstructions()))
            .satisfies(e -> assertThat(e.getDeadBranches()).as("check deadBranches").isEqualTo(actual.getDeadBranches()))
            .satisfies(e -> assertThat(e.getDeadLines()).as("check deadLines").isEqualTo(actual.getDeadLines()))
            .satisfies(e -> assertThat(e.getDeadMethods()).as("check deadMethods").isEqualTo(actual.getDeadMethods()))
            .satisfies(e -> assertThat(e.getDeadClasses()).as("check deadClasses").isEqualTo(actual.getDeadClasses()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCodeStatsUpdatableRelationshipsEquals(CodeStats expected, CodeStats actual) {
        // empty method
    }
}
