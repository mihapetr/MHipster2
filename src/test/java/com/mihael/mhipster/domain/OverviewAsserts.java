package com.mihael.mhipster.domain;

import static com.mihael.mhipster.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class OverviewAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverviewAllPropertiesEquals(Overview expected, Overview actual) {
        assertOverviewAutoGeneratedPropertiesEquals(expected, actual);
        assertOverviewAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverviewAllUpdatablePropertiesEquals(Overview expected, Overview actual) {
        assertOverviewUpdatableFieldsEquals(expected, actual);
        assertOverviewUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverviewAutoGeneratedPropertiesEquals(Overview expected, Overview actual) {
        assertThat(expected)
            .as("Verify Overview auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverviewUpdatableFieldsEquals(Overview expected, Overview actual) {
        assertThat(expected)
            .as("Verify Overview relevant properties")
            .satisfies(e ->
                assertThat(e.getDateGenerated())
                    .as("check dateGenerated")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getDateGenerated())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverviewUpdatableRelationshipsEquals(Overview expected, Overview actual) {
        assertThat(expected)
            .as("Verify Overview relationships")
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()))
            .satisfies(e -> assertThat(e.getProjects()).as("check projects").isEqualTo(actual.getProjects()));
    }
}
