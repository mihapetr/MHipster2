package com.mihael.mhipster.domain;

import static com.mihael.mhipster.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class FeatureTstAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeatureTstAllPropertiesEquals(FeatureTst expected, FeatureTst actual) {
        assertFeatureTstAutoGeneratedPropertiesEquals(expected, actual);
        assertFeatureTstAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeatureTstAllUpdatablePropertiesEquals(FeatureTst expected, FeatureTst actual) {
        assertFeatureTstUpdatableFieldsEquals(expected, actual);
        assertFeatureTstUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeatureTstAutoGeneratedPropertiesEquals(FeatureTst expected, FeatureTst actual) {
        assertThat(expected)
            .as("Verify FeatureTst auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeatureTstUpdatableFieldsEquals(FeatureTst expected, FeatureTst actual) {
        assertThat(expected)
            .as("Verify FeatureTst relevant properties")
            .satisfies(e -> assertThat(e.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeatureTstUpdatableRelationshipsEquals(FeatureTst expected, FeatureTst actual) {
        assertThat(expected)
            .as("Verify FeatureTst relationships")
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()))
            .satisfies(e -> assertThat(e.getFeatures()).as("check features").isEqualTo(actual.getFeatures()))
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()));
    }
}
