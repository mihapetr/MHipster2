# Todo

## Backend

* make sure you post the list of features being tested !
* curent user filters for all entities (feature, mdls, project, featureTst)
* assign current user for all entities (-||-)


* make the logic for platform overview generation
  * admin overview
* download the files
* check async execution of file generating

## UI
* download button

--------------------


* post the feature list after testing (request parameter)
* prepare demo for tomorrow


* reenable editing the project
* feature tst details should show the parent stuff (stats)
* project view : make mdls and features visible
* filter feature tst by project user
* make the file generation be a step after project generation : generate button
	* it is possible to regenerate the files
* download button for project

---------------- DEMO ----------------------

Feature: Account

  Scenario: Successful registration
    Given user does not have account
    When user submits registration form
    Then user profile is created
    And user is notified about success

  Scenario: Successful login
    Given credentials are valid
    When user submits login form : success
    Then user is logged in : account

  Scenario: Unsuccessful login
    Given credentials are invalid
    When user submits login form : fail
    Then login is rejected
    Then user is notified about failure

-------------------------

entity MDLS {
	baseConfig String
	content TextBlob
	/* methods
	*/
}
entity Project {
	name String
	description String
	creationTimeStamp ZonedDateTime
	location String
	/* methods
	String generate()
	*/
}
entity Feature {
	name String
	content TextBlob
	/* methods
	*/
}
entity FeatureTst{
	date ZonedDateTime
	/* methods
	void generateStats()
	*/
}
entity Overview {
	dateGenerated ZonedDateTime
	/* methods
	void update()
	*/
}
entity CodeStats {
	instructions Double
	branches Double
	lines Double
	methods Double
	classes Double
	deadInstructions Double
	deadBranches Double
	deadLines Double
	deadMethods Double
	deadClasses Double
	/* methods
	*/
}
entity TestReport {
	html String //path to html
	runtimeRetention Boolean
	missedInstructions Integer
	instructions Integer
	missedBranches Integer
	branches Integer
	missedLines Integer
	lines Integer
	missedMethods Integer
	methods Integer
	missedClasses Integer
	classes Integer
	/* methods
	*/
}
relationship OneToOne {
	Project{mdls} to MDLS{project}
}
relationship ManyToMany {
	Project{feature} to Feature{project}
}
relationship OneToMany {
	@OnDelete("CASCADE") Project{featureTst} to FeatureTst{project required}
}
relationship ManyToMany {
	Overview{project} to Project{overview}
}
relationship ManyToMany {
	FeatureTst{feature} to Feature{featureTst}
}
relationship OneToMany {
	@OnDelete("CASCADE") FeatureTst{testReport} to TestReport{featureTst required}
}
relationship OneToOne {
	@OnDelete("CASCADE") /*@OnPersist("CASCADE")*/ Overview{parent required} to CodeStats{overview}
}
relationship OneToOne {
	@OnDelete("CASCADE") /*@OnPersist("CASCADE")*/ FeatureTst{parent required} to CodeStats{featureTst}
}

--------------------------------------------------

chmod +x ./mvnw
./mvnw install -DskipTests
chmod +x test_features.sh
./test_features.sh

